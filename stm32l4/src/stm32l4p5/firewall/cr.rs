#[doc = "Register `CR` reader"]
pub type R = crate::R<CRrs>;
#[doc = "Register `CR` writer"]
pub type W = crate::W<CRrs>;
#[doc = "Firewall pre alarm\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum FPA {
    #[doc = "0: Any code executed outside the protected segment when the Firewall is opened will generate a system reset"]
    Reset = 0,
    #[doc = "1: Any code executed outside the protected segment will close the Firewall"]
    Close = 1,
}
impl From<FPA> for bool {
    #[inline(always)]
    fn from(variant: FPA) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `FPA` reader - Firewall pre alarm"]
pub type FPA_R = crate::BitReader<FPA>;
impl FPA_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> FPA {
        match self.bits {
            false => FPA::Reset,
            true => FPA::Close,
        }
    }
    #[doc = "Any code executed outside the protected segment when the Firewall is opened will generate a system reset"]
    #[inline(always)]
    pub fn is_reset(&self) -> bool {
        *self == FPA::Reset
    }
    #[doc = "Any code executed outside the protected segment will close the Firewall"]
    #[inline(always)]
    pub fn is_close(&self) -> bool {
        *self == FPA::Close
    }
}
#[doc = "Field `FPA` writer - Firewall pre alarm"]
pub type FPA_W<'a, REG> = crate::BitWriter<'a, REG, FPA>;
impl<'a, REG> FPA_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "Any code executed outside the protected segment when the Firewall is opened will generate a system reset"]
    #[inline(always)]
    pub fn reset(self) -> &'a mut crate::W<REG> {
        self.variant(FPA::Reset)
    }
    #[doc = "Any code executed outside the protected segment will close the Firewall"]
    #[inline(always)]
    pub fn close(self) -> &'a mut crate::W<REG> {
        self.variant(FPA::Close)
    }
}
#[doc = "Volatile data shared\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum VDS {
    #[doc = "0: Volatile data segment is not shared and cannot be hit by a non protected executable code when the Firewall is closed. If it is accessed in such a condition, a system reset will be generated by the Firewall"]
    NotShared = 0,
    #[doc = "1: Volatile data segment is shared with non protected application code. It can be accessed whatever the Firewall state (opened or closed)"]
    Shared = 1,
}
impl From<VDS> for bool {
    #[inline(always)]
    fn from(variant: VDS) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `VDS` reader - Volatile data shared"]
pub type VDS_R = crate::BitReader<VDS>;
impl VDS_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> VDS {
        match self.bits {
            false => VDS::NotShared,
            true => VDS::Shared,
        }
    }
    #[doc = "Volatile data segment is not shared and cannot be hit by a non protected executable code when the Firewall is closed. If it is accessed in such a condition, a system reset will be generated by the Firewall"]
    #[inline(always)]
    pub fn is_not_shared(&self) -> bool {
        *self == VDS::NotShared
    }
    #[doc = "Volatile data segment is shared with non protected application code. It can be accessed whatever the Firewall state (opened or closed)"]
    #[inline(always)]
    pub fn is_shared(&self) -> bool {
        *self == VDS::Shared
    }
}
#[doc = "Field `VDS` writer - Volatile data shared"]
pub type VDS_W<'a, REG> = crate::BitWriter<'a, REG, VDS>;
impl<'a, REG> VDS_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "Volatile data segment is not shared and cannot be hit by a non protected executable code when the Firewall is closed. If it is accessed in such a condition, a system reset will be generated by the Firewall"]
    #[inline(always)]
    pub fn not_shared(self) -> &'a mut crate::W<REG> {
        self.variant(VDS::NotShared)
    }
    #[doc = "Volatile data segment is shared with non protected application code. It can be accessed whatever the Firewall state (opened or closed)"]
    #[inline(always)]
    pub fn shared(self) -> &'a mut crate::W<REG> {
        self.variant(VDS::Shared)
    }
}
#[doc = "Volatile data execution\n\nValue on reset: 0"]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum VDE {
    #[doc = "0: Volatile data segment cannot be executed if VDS = 0"]
    NotExecutable = 0,
    #[doc = "1: Volatile data segment is declared executable whatever VDS bit value"]
    Executable = 1,
}
impl From<VDE> for bool {
    #[inline(always)]
    fn from(variant: VDE) -> Self {
        variant as u8 != 0
    }
}
#[doc = "Field `VDE` reader - Volatile data execution"]
pub type VDE_R = crate::BitReader<VDE>;
impl VDE_R {
    #[doc = "Get enumerated values variant"]
    #[inline(always)]
    pub const fn variant(&self) -> VDE {
        match self.bits {
            false => VDE::NotExecutable,
            true => VDE::Executable,
        }
    }
    #[doc = "Volatile data segment cannot be executed if VDS = 0"]
    #[inline(always)]
    pub fn is_not_executable(&self) -> bool {
        *self == VDE::NotExecutable
    }
    #[doc = "Volatile data segment is declared executable whatever VDS bit value"]
    #[inline(always)]
    pub fn is_executable(&self) -> bool {
        *self == VDE::Executable
    }
}
#[doc = "Field `VDE` writer - Volatile data execution"]
pub type VDE_W<'a, REG> = crate::BitWriter<'a, REG, VDE>;
impl<'a, REG> VDE_W<'a, REG>
where
    REG: crate::Writable + crate::RegisterSpec,
{
    #[doc = "Volatile data segment cannot be executed if VDS = 0"]
    #[inline(always)]
    pub fn not_executable(self) -> &'a mut crate::W<REG> {
        self.variant(VDE::NotExecutable)
    }
    #[doc = "Volatile data segment is declared executable whatever VDS bit value"]
    #[inline(always)]
    pub fn executable(self) -> &'a mut crate::W<REG> {
        self.variant(VDE::Executable)
    }
}
impl R {
    #[doc = "Bit 0 - Firewall pre alarm"]
    #[inline(always)]
    pub fn fpa(&self) -> FPA_R {
        FPA_R::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - Volatile data shared"]
    #[inline(always)]
    pub fn vds(&self) -> VDS_R {
        VDS_R::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 2 - Volatile data execution"]
    #[inline(always)]
    pub fn vde(&self) -> VDE_R {
        VDE_R::new(((self.bits >> 2) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 0 - Firewall pre alarm"]
    #[inline(always)]
    #[must_use]
    pub fn fpa(&mut self) -> FPA_W<CRrs> {
        FPA_W::new(self, 0)
    }
    #[doc = "Bit 1 - Volatile data shared"]
    #[inline(always)]
    #[must_use]
    pub fn vds(&mut self) -> VDS_W<CRrs> {
        VDS_W::new(self, 1)
    }
    #[doc = "Bit 2 - Volatile data execution"]
    #[inline(always)]
    #[must_use]
    pub fn vde(&mut self) -> VDE_W<CRrs> {
        VDE_W::new(self, 2)
    }
}
#[doc = "Configuration register\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cr::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cr::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct CRrs;
impl crate::RegisterSpec for CRrs {
    type Ux = u32;
}
#[doc = "`read()` method returns [`cr::R`](R) reader structure"]
impl crate::Readable for CRrs {}
#[doc = "`write(|w| ..)` method takes [`cr::W`](W) writer structure"]
impl crate::Writable for CRrs {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets CR to value 0"]
impl crate::Resettable for CRrs {
    const RESET_VALUE: u32 = 0;
}
